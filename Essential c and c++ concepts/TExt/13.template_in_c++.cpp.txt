5:59 PM 8/20/2021

TEMPLATE CLASSES
------------------------
c++ supports generic functions(template functions) and generic classes.

>>This is a general code for a arithmatic class.
-----------------------------------------------
#include <bits/stdc++.h>
using namespace std;
class arithmatic
{
private:
    int a;
    int b;

public:
    arithmatic(int c, int d)
    {
        a = c;
        b = d;
    }
    int add();
    int sub();
};
int arithmatic::add()
{
    return a + b;
}
int arithmatic::sub()
{
    return b - a;
}

int main()
{
    arithmatic t(10, 20);
    cout << t.add() << " " << t.sub() << endl;
    return 0;
}

>>Now the template class for that arithmatic class.
____________________________________________________
#include <bits/stdc++.h>
using namespace std;
template <class T>
class arithmatic
{
private:
    T a;
    T b;

public:
    arithmatic(T a, T b);
    T add();
    T sub();
};
template <class T>
arithmatic<T>::arithmatic(T c, T d)
{
    a = c;
    b = d;
}
template <class T>
T arithmatic<T>::add()
{
    return a + b;
}
template <class T>
T arithmatic<T>::sub()
{
    return b - a;
}

int main()
{
    arithmatic<int> ar(10, 20);
    cout << ar.add() << " " << ar.sub() << endl;
    arithmatic<float> ar2(5.20, 14.63);
    cout << ar2.add() << " " << ar2.sub() << endl;

    return 0;
}

//Here the 'T' represents the templte class.